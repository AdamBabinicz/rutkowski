import { useState, useMemo } from "react";
import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { Helmet } from "react-helmet-async";
import { useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import FilterPanel from "@/components/filter-panel";
import ArtworkCard from "@/components/artwork-card";
import artworksData from "@/data/artworks.json";
import type { Artwork } from "@shared/schema";

export default function Home() {
  const { t } = useTranslation();
  const [, setLocation] = useLocation();
  const [isArtistDialogOpen, setIsArtistDialogOpen] = useState(false);
  const [filters, setFilters] = useState({
    year: "all",
    theme: "all",
    technique: "all",
    search: "",
  });

  const artworks = artworksData as Artwork[];

  const filteredArtworks = useMemo(() => {
    return artworks.filter((artwork) => {
      if (filters.year !== "all" && artwork.year.toString() !== filters.year)
        return false;
      if (filters.theme !== "all" && !artwork.tags?.includes(filters.theme))
        return false;
      if (
        filters.technique !== "all" &&
        artwork.technique !== filters.technique
      )
        return false;
      if (filters.search) {
        const searchTerm = filters.search.toLowerCase();
        const title = artwork.title.toLowerCase();
        const description = artwork.description.toLowerCase();
        const tags = artwork.tags?.join(" ").toLowerCase() || "";
        if (
          !title.includes(searchTerm) &&
          !description.includes(searchTerm) &&
          !tags.includes(searchTerm)
        ) {
          return false;
        }
      }
      return true;
    });
  }, [artworks, filters]);

  const handleFilterChange = (key: string, value: string) => {
    setFilters((prev) => ({ ...prev, [key]: value }));
  };

  const handleArtworkClick = (id: string) => {
    setLocation(`/artwork/${id}`);
  };

  return (
    <>
      <Helmet>
        <title>
          {t("hero.title")} {t("hero.subtitle")} - {t("site.fullTitle")}
        </title>
        <meta name="description" content={t("hero.description")} />
      </Helmet>

      <main className="pt-20">
        {/* Hero Section */}
        <section className="py-20 px-4">
          <div className="max-w-4xl mx-auto text-center">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
            >
              <h1 className="font-poppins font-bold text-4xl md:text-6xl text-gray-800 dark:text-white mb-6">
                {t("hero.title")} <br />
                <span className="bg-gradient-to-r from-watercolor-ochre-accent to-watercolor-umber-accent bg-clip-text text-transparent">
                  {t("hero.subtitle")}
                </span>
              </h1>
              <p className="text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-2xl mx-auto leading-relaxed">
                {t("hero.description")}
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button
                  size="lg"
                  className="bg-gradient-to-r from-watercolor-ochre-accent to-watercolor-umber-accent text-white px-8 py-3 rounded-full hover:shadow-lg transition-all duration-300 font-medium"
                  onClick={() =>
                    document
                      .getElementById("gallery")
                      ?.scrollIntoView({ behavior: "smooth" })
                  }
                  data-testid="cta-button"
                >
                  {t("hero.cta")}
                </Button>
                <Button
                  size="lg"
                  variant="outline"
                  className="border-2 border-watercolor-ochre-accent text-watercolor-ochre-accent hover:bg-watercolor-ochre-accent hover:text-white px-8 py-3 rounded-full transition-all duration-300 font-medium"
                  onClick={() => setIsArtistDialogOpen(true)}
                  data-testid="artist-info-button"
                >
                  Poznaj Artystę
                </Button>
              </div>
            </motion.div>
          </div>
        </section>

        {/* Filter Panel */}
        <FilterPanel filters={filters} onFilterChange={handleFilterChange} />

        {/* Gallery Grid */}
        <section id="gallery" className="px-4 pb-20">
          <div className="max-w-7xl mx-auto">
            {filteredArtworks.length > 0 ? (
              <div
                className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8"
                data-testid="gallery-grid"
              >
                {filteredArtworks.map((artwork, index) => (
                  <ArtworkCard
                    key={artwork.id}
                    artwork={artwork}
                    index={index}
                    onClick={() => handleArtworkClick(artwork.id)}
                  />
                ))}
              </div>
            ) : (
              <div className="text-center py-16" data-testid="no-results">
                <div className="text-gray-500 dark:text-gray-400 text-lg">
                  Nie znaleziono dzieł spełniających kryteria wyszukiwania.
                </div>
                <Button
                  variant="outline"
                  className="mt-4"
                  onClick={() =>
                    setFilters({
                      year: "all",
                      theme: "all",
                      technique: "all",
                      search: "",
                    })
                  }
                  data-testid="clear-filters"
                >
                  Wyczyść filtry
                </Button>
              </div>
            )}
          </div>
        </section>

        {/* Artist Info Dialog */}
        <Dialog open={isArtistDialogOpen} onOpenChange={setIsArtistDialogOpen}>
          <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle className="font-poppins text-2xl text-gray-800 dark:text-white mb-2">
                Zbigniew Jan Rutkowski
              </DialogTitle>
              <DialogDescription className="text-lg text-watercolor-ochre-accent font-medium">
                Malarz akwarelista z niemal 50-letnim doświadczeniem
              </DialogDescription>
            </DialogHeader>

            <div className="space-y-4 text-gray-700 dark:text-gray-300">
              <div className="flex flex-col sm:flex-row gap-4">
                <img
                  src="/3.jpg"
                  alt="Zbigniew Jan Rutkowski malujący na plenerze"
                  className="w-32 h-32 rounded-full object-cover mx-auto sm:mx-0 border-4 border-watercolor-ochre-accent"
                />
                <div className="flex-1">
                  <p className="text-sm leading-relaxed">
                    <strong>Urodzony:</strong> 11 czerwca 1952 roku w Radomiu
                  </p>
                  <p className="text-sm leading-relaxed mt-2">
                    <strong>Wykształcenie:</strong> Absolwent Państwowego
                    Ogniska Plastycznego im. Jacka Malczewskiego w Radomiu
                    (1973-75), ukończył z wyróżnieniem kurs II stopnia "Za
                    wybitne osiągnięcia w dziale malarstwa".
                  </p>
                </div>
              </div>

              <div className="space-y-3">
                <h4 className="font-poppins font-semibold text-lg text-gray-800 dark:text-white">
                  Najważniejsze osiągnięcia
                </h4>
                <ul className="space-y-2 text-sm">
                  <li>
                    • <strong>1968</strong> - Pierwsza wystawa w Klubie
                    "Łączności" w Radomiu
                  </li>
                  <li>
                    • <strong>1987</strong> - Plener w Wieliczce, otrzymał tytuł
                    "Honorowego Górnika Kopalni Soli"
                  </li>
                  <li>
                    • <strong>Lata 90.</strong> - Namalował 14 stacji "Drogi
                    Krzyżowej" według Józefa Mehoffera dla kościoła św. Jadwigi
                    Królowej w Radomiu
                  </li>
                  <li>
                    • Członek Zarządu Towarzystwa Przyjaciół Sztuk Pięknych,
                    prowadził "Klub Plastyka Amatora"
                  </li>
                  <li>
                    • Liczne wystawy w Warszawie, Poznaniu, Łodzi - I miejsce w
                    dziale malarstwa w Wojskach Lotniczych
                  </li>
                </ul>
              </div>

              <div className="space-y-3">
                <h4 className="font-poppins font-semibold text-lg text-gray-800 dark:text-white">
                  Kolekcje międzynarodowe
                </h4>
                <p className="text-sm leading-relaxed">
                  Prace artysty znajdują się w prywatnych kolekcjach w{" "}
                  <strong>
                    Polsce, Szwecji, Argentynie, Austrii, Szwajcarii, Kanadzie i
                    USA
                  </strong>
                  . Znaczną część kolekcji stanowią dzieła w posiadaniu
                  wieloletniego przyjaciela i mecenasa artysty Piotra Drózda.
                </p>
              </div>

              <div className="bg-watercolor-cream dark:bg-gray-800 p-4 rounded-xl border border-watercolor-ochre-accent/20">
                <p className="text-sm italic text-center text-gray-600 dark:text-gray-400">
                  "Przez niemal 50 lat malarstwo było i jest moją pasją oraz
                  odskocznią od codziennego życia"
                </p>
                <p className="text-xs text-center mt-2 text-watercolor-ochre-accent font-medium">
                  - Zbigniew Jan Rutkowski
                </p>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </main>
    </>
  );
}

---------------------------------

import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { Helmet } from "react-helmet-async";

const exhibitionsData = [
  {
    year: "1968",
    titleKey: "exhibitions.exhibition1968.title",
    locationKey: "exhibitions.exhibition1968.location",
    descriptionKey: "exhibitions.exhibition1968.description",
    imageUrl: "/exhibitions/1.jpg",
  },
  {
    year: "1987",
    titleKey: "exhibitions.exhibition1987.title",
    locationKey: "exhibitions.exhibition1987.location",
    descriptionKey: "exhibitions.exhibition1987.description",
    imageUrl: "/exhibitions/2.jpg",
  },
  {
    year: "Lata 90.",
    titleKey: "exhibitions.exhibition1990s.title",
    locationKey: "exhibitions.exhibition1990s.location",
    descriptionKey: "exhibitions.exhibition1990s.description",
    imageUrl: "/exhibitions/1990s.jpg",
  },
  {
    year: "2014",
    titleKey: "exhibitions.exhibition2014.title",
    locationKey: "exhibitions.exhibition2014.location",
    descriptionKey: "exhibitions.exhibition2014.description",
    imageUrl: "/exhibitions/2014.jpg",
  },
];

export default function Exhibitions() {
  const { t } = useTranslation();

  return (
    <>
      <Helmet>
        <title>
          {t("exhibitions.title")} - {t("site.fullTitle")}
        </title>
        <meta name="description" content={t("exhibitions.description")} />
      </Helmet>

      <main className="pt-20">
        <section className="py-20 px-4">
          <div className="max-w-4xl mx-auto text-center">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
            >
              <h1 className="font-poppins font-bold text-4xl md:text-6xl text-gray-800 dark:text-white mb-6">
                {t("exhibitions.title")}
              </h1>
              <p className="text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-2xl mx-auto leading-relaxed">
                {t("exhibitions.description")}
              </p>
            </motion.div>
          </div>
        </section>

        <section className="px-4 pb-20">
          <div className="max-w-4xl mx-auto">
            <div className="relative border-l-2 border-watercolor-ochre-accent dark:border-watercolor-ochre ml-4">
              {exhibitionsData.map((exhibition, index) => (
                <motion.div
                  key={index}
                  className="mb-12 pl-8 relative"
                  initial={{ opacity: 0, x: -50 }}
                  whileInView={{ opacity: 1, x: 0 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.6, delay: 0.2 }}
                >
                  <div className="absolute -left-4 top-0 w-8 h-8 bg-watercolor-ochre-accent dark:bg-watercolor-ochre rounded-full border-4 border-background dark:border-gray-900 flex items-center justify-center">
                    <span className="text-white font-bold">{index + 1}</span>
                  </div>
                  <div
                    className={`flex flex-col ${
                      index % 2 === 0 ? "md:flex-row" : "md:flex-row-reverse"
                    } gap-8 items-center`}
                  >
                    <img
                      src={exhibition.imageUrl}
                      alt={t(exhibition.titleKey)}
                      className="w-full md:w-1/2 rounded-lg shadow-xl"
                    />
                    <div className="flex-1">
                      <p className="font-poppins font-semibold text-xl text-watercolor-ochre-accent dark:text-watercolor-ochre">
                        {exhibition.year}
                      </p>
                      <h3 className="font-poppins font-bold text-2xl text-gray-800 dark:text-white mt-1 mb-2">
                        {t(exhibition.titleKey)}
                      </h3>
                      <p className="text-sm text-gray-500 dark:text-gray-400 mb-3">
                        {t(exhibition.locationKey)}
                      </p>
                      <p className="text-gray-600 dark:text-gray-300">
                        {t(exhibition.descriptionKey)}
                      </p>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        </section>
      </main>
    </>
  );
}

------------------------------

import { useTranslation } from "react-i18next";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Search } from "lucide-react";

interface FilterPanelProps {
  filters: {
    year: string;
    theme: string;
    technique: string;
    search: string;
  };
  onFilterChange: (key: string, value: string) => void;
}

export default function FilterPanel({ filters, onFilterChange }: FilterPanelProps) {
  const { t } = useTranslation();

  const years = ["2023", "2022", "2021", "2020"];
  const themes = ["natura", "portret", "abstrakcja", "pejzaz", "kwiaty", "woda"];
  const techniques = ["akwarela", "olej", "akryl", "pastel"];

  return (
    <section className="px-4 mb-12">
      <div className="max-w-7xl mx-auto">
        <div className="bg-white/60 dark:bg-gray-800/60 backdrop-blur-lg rounded-2xl p-6 border border-white/20 dark:border-gray-700/20">
          <h3 className="font-poppins font-semibold text-lg mb-4 text-gray-800 dark:text-white">
            {t("filter.title")}
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {/* Year Filter */}
            <div>
              <Label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t("filter.year")}
              </Label>
              <Select value={filters.year} onValueChange={(value) => onFilterChange("year", value)}>
                <SelectTrigger data-testid="filter-year">
                  <SelectValue placeholder={t("filter.allYears")} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">{t("filter.allYears")}</SelectItem>
                  {years.map((year) => (
                    <SelectItem key={year} value={year}>
                      {year}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Theme Filter */}
            <div>
              <Label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t("filter.theme")}
              </Label>
              <Select value={filters.theme} onValueChange={(value) => onFilterChange("theme", value)}>
                <SelectTrigger data-testid="filter-theme">
                  <SelectValue placeholder={t("filter.allThemes")} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">{t("filter.allThemes")}</SelectItem>
                  {themes.map((theme) => (
                    <SelectItem key={theme} value={theme}>
                      {t(`themes.${theme}`)}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Technique Filter */}
            <div>
              <Label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t("filter.technique")}
              </Label>
              <Select value={filters.technique} onValueChange={(value) => onFilterChange("technique", value)}>
                <SelectTrigger data-testid="filter-technique">
                  <SelectValue placeholder={t("filter.allTechniques")} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">{t("filter.allTechniques")}</SelectItem>
                  {techniques.map((technique) => (
                    <SelectItem key={technique} value={technique}>
                      {t(`techniques.${technique}`)}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Search */}
            <div>
              <Label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t("filter.search")}
              </Label>
              <div className="relative">
                <Input
                  type="text"
                  placeholder={t("filter.searchPlaceholder")}
                  value={filters.search}
                  onChange={(e) => onFilterChange("search", e.target.value)}
                  className="pr-10"
                  data-testid="filter-search"
                />
                <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

----------------------------

import { Switch, Route } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { ThemeProvider } from "@/components/theme-provider";
import { Helmet, HelmetProvider } from "react-helmet-async";
import { Suspense } from "react";
import { I18nextProvider } from "react-i18next";
import i18n from "./lib/i18n";

import Navbar from "@/components/navbar";
import Footer from "@/components/footer";
import Home from "@/pages/home";
import About from "@/pages/about";
import ArtworkDetail from "@/pages/artwork-detail";
import Contact from "@/pages/contact";
import Exhibitions from "@/pages/exhibitions";
import Archive from "@/pages/archive";
import NotFound from "@/pages/not-found";

function Router() {
  return (
    <Switch>
      <Route path="/" component={Home} />
      <Route path="/exhibitions" component={Exhibitions} />
      <Route path="/archive" component={Archive} />
      <Route path="/about" component={About} />
      <Route path="/artwork/:id" component={ArtworkDetail} />
      <Route path="/contact" component={Contact} />
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  return (
    <HelmetProvider>
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <ThemeProvider>
            <TooltipProvider>
              <Helmet>
                <title>Atlas Twórczości Zbigniewa Rutkowskiego</title>
                <meta
                  name="description"
                  content="Odkryj niezwykłą kolekcję dzieł artysty Rutkowskiego"
                />
              </Helmet>
              <div className="min-h-screen bg-gradient-to-br from-watercolor-warm-white via-background to-watercolor-sage dark:from-watercolor-charcoal dark:via-gray-900 dark:to-watercolor-charcoal-light transition-all duration-300">
                <Navbar />
                <Suspense fallback={<div>Ładowanie...</div>}>
                  <Router />
                </Suspense>
                <Footer />
              </div>
              <Toaster />
            </TooltipProvider>
          </ThemeProvider>
        </I18nextProvider>
      </QueryClientProvider>
    </HelmetProvider>
  );
}

export default App;

--------------dobry plik, ale bez powrotu------------

import { useState } from "react";
import { useParams } from "wouter";
import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { Helmet } from "react-helmet-async";

import { Badge } from "@/components/ui/badge";
import ImageSlider from "@/components/image-slider";
import ImageModal from "@/components/image-modal";
import NotFound from "@/pages/not-found";
import artworksData from "@/data/artworks.json";
import type { Artwork } from "@shared/schema";

export default function ArtworkDetail() {
  const { id } = useParams();
  const { t, i18n } = useTranslation();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalImageUrl, setModalImageUrl] = useState("");

  const artworks = artworksData as Artwork[];
  const artwork = artworks.find((a) => a.id === id);

  if (!artwork) {
    return <NotFound />;
  }

  const getLocalized = (field: "title" | "description" | "story") => {
    const lang = i18n.language;
    let key: keyof Artwork;

    switch (lang) {
      case "en":
        key = `${field}En` as keyof Artwork;
        break;
      case "fr":
        key = `${field}Fr` as keyof Artwork;
        break;
      default:
        key = field;
        break;
    }
    return (artwork[key] || artwork[field]) as string;
  };

  const handleImageClick = (imageUrl: string) => {
    setModalImageUrl(imageUrl);
    setIsModalOpen(true);
  };

  const images =
    artwork.imageUrls && artwork.imageUrls.length > 0
      ? artwork.imageUrls
      : [artwork.imageUrl];

  return (
    <>
      <Helmet>
        <title>{getLocalized("title")} - Atlas Twórczości Rutkowskiego</title>
        <meta
          name="description"
          content={getLocalized("description").substring(0, 160)}
        />
        <meta property="og:title" content={getLocalized("title")} />
        <meta
          property="og:description"
          content={getLocalized("description").substring(0, 160)}
        />
        <meta property="og:image" content={artwork.imageUrl} />
      </Helmet>

      <section className="pt-20 py-20 px-4">
        <div className="max-w-6xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            className="grid grid-cols-1 lg:grid-cols-2 gap-12"
          >
            <ImageSlider
              images={images}
              alt={getLocalized("title")}
              onImageClick={handleImageClick}
            />

            <div className="space-y-6">
              <div>
                <h1 className="font-poppins font-bold text-3xl text-gray-800 dark:text-white mb-2">
                  {getLocalized("title")}
                </h1>
                <p className="text-watercolor-ochre-accent dark:text-watercolor-ochre font-medium text-lg">
                  {artwork.year} • {t(`techniques.${artwork.technique}`)}
                </p>
              </div>

              <div className="bg-white/60 dark:bg-gray-800/60 backdrop-blur-lg rounded-xl p-4 border border-white/20 dark:border-gray-700/20">
                <h3 className="font-poppins font-semibold text-lg text-gray-800 dark:text-white mb-3">
                  {t("artwork.details")}
                </h3>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      {t("artwork.dimensions")}:
                    </span>
                    <p className="font-medium text-gray-800 dark:text-white">
                      {artwork.dimensions}
                    </p>
                  </div>
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      {t("artwork.technique")}:
                    </span>
                    <p className="font-medium text-gray-800 dark:text-white">
                      {t(`techniques.${artwork.technique}`)}
                    </p>
                  </div>
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      {t("artwork.substrate")}:
                    </span>
                    <p className="font-medium text-gray-800 dark:text-white">
                      {artwork.technique === "akwarela"
                        ? "Papier akwarelowy 300g"
                        : "Płótno"}
                    </p>
                  </div>
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      {t("artwork.status")}:
                    </span>
                    <p
                      className={`font-medium ${
                        artwork.available
                          ? "text-watercolor-ochre-accent dark:text-watercolor-ochre"
                          : "text-watercolor-umber-accent dark:text-watercolor-umber"
                      }`}
                    >
                      {artwork.available
                        ? t("artwork.available")
                        : t("artwork.sold")}
                    </p>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="font-poppins font-semibold text-lg text-gray-800 dark:text-white mb-3">
                  {t("artwork.tags")}
                </h3>
                <div className="flex flex-wrap gap-2">
                  {artwork.tags?.map((tag: string) => (
                    <Badge
                      key={tag}
                      variant="secondary"
                      className="bg-watercolor-sage text-gray-700 px-3 py-1 rounded-full text-sm font-medium"
                    >
                      {t(`themes.${tag}`, tag) as string}
                    </Badge>
                  ))}
                </div>
              </div>

              <div>
                <h3 className="font-poppins font-semibold text-lg text-gray-800 dark:text-white mb-3">
                  {t("artwork.description")}
                </h3>
                <p className="text-gray-600 dark:text-gray-300 leading-relaxed">
                  {getLocalized("description")}
                </p>
              </div>

              {getLocalized("story") && (
                <div className="bg-gradient-to-r from-watercolor-ochre/30 to-watercolor-umber/30 dark:from-gray-700/30 dark:to-gray-600/30 rounded-xl p-4 border-l-4 border-watercolor-ochre-accent">
                  <h3 className="font-poppins font-semibold text-lg text-gray-800 dark:text-white mb-2">
                    <i className="fas fa-quote-left text-watercolor-ochre-accent mr-2"></i>
                    {t("artwork.story")}
                  </h3>
                  <p className="text-gray-700 dark:text-gray-300 italic">
                    "{getLocalized("story")}"
                  </p>
                </div>
              )}
            </div>
          </motion.div>
        </div>
      </section>

      <ImageModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        imageUrl={modalImageUrl}
        alt={getLocalized("title")}
      />
    </>
  );
}

---------------------------------

import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { X, ZoomIn, ZoomOut, Download } from "lucide-react";
import { Button } from "@/components/ui/button";

interface ImageModalProps {
  isOpen: boolean;
  onClose: () => void;
  imageUrl: string;
  alt: string;
}

export default function ImageModal({ isOpen, onClose, imageUrl, alt }: ImageModalProps) {
  const [zoomLevel, setZoomLevel] = useState(100);

  const handleZoomIn = () => {
    setZoomLevel(prev => Math.min(prev + 25, 200));
  };

  const handleZoomOut = () => {
    setZoomLevel(prev => Math.max(prev - 25, 50));
  };

  const handleDownload = () => {
    const link = document.createElement('a');
    link.href = imageUrl;
    link.download = alt;
    link.click();
  };

  const handleBackdropClick = (e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/90 z-50 flex items-center justify-center p-4"
          onClick={handleBackdropClick}
          data-testid="image-modal"
        >
          <div className="relative max-w-5xl max-h-full">
            <Button
              variant="ghost"
              size="icon"
              className="absolute -top-12 right-0 text-white hover:text-gray-300 hover:bg-white/10"
              onClick={onClose}
              data-testid="modal-close"
            >
              <X className="h-6 w-6" />
            </Button>

            <motion.img
              initial={{ scale: 0.8 }}
              animate={{ scale: 1 }}
              exit={{ scale: 0.8 }}
              src={imageUrl}
              alt={alt}
              className="max-w-full max-h-full rounded-lg transition-transform duration-300"
              style={{ transform: `scale(${zoomLevel / 100})` }}
              data-testid="modal-image"
            />

            {/* Image Controls */}
            <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/50 rounded-full px-4 py-2 flex items-center space-x-4">
              <Button
                variant="ghost"
                size="icon"
                className="text-white hover:text-gray-300 hover:bg-white/10"
                onClick={handleZoomOut}
                disabled={zoomLevel <= 50}
                data-testid="zoom-out"
              >
                <ZoomOut className="h-4 w-4" />
              </Button>
              <span className="text-white text-sm" data-testid="zoom-level">
                {zoomLevel}%
              </span>
              <Button
                variant="ghost"
                size="icon"
                className="text-white hover:text-gray-300 hover:bg-white/10"
                onClick={handleZoomIn}
                disabled={zoomLevel >= 200}
                data-testid="zoom-in"
              >
                <ZoomIn className="h-4 w-4" />
              </Button>
              <div className="w-px h-4 bg-gray-500"></div>
              <Button
                variant="ghost"
                size="icon"
                className="text-white hover:text-gray-300 hover:bg-white/10"
                onClick={handleDownload}
                data-testid="download-image"
              >
                <Download className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

------------------------------

import { sql } from "drizzle-orm";
import { pgTable, text, varchar, integer, jsonb, timestamp } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const artworks = pgTable("artworks", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  title: text("title").notNull(),
  titleEn: text("title_en"),
  titleFr: text("title_fr"),
  year: integer("year").notNull(),
  imageUrl: text("image_url").notNull(),
  imageUrls: jsonb("image_urls").$type<string[]>().default([]),
  dimensions: text("dimensions").notNull(),
  technique: text("technique").notNull(),
  tags: jsonb("tags").$type<string[]>().default([]),
  dominantColor: text("dominant_color"),
  description: text("description").notNull(),
  descriptionEn: text("description_en"),
  descriptionFr: text("description_fr"),
  story: text("story"),
  storyEn: text("story_en"),
  storyFr: text("story_fr"),
  available: integer("available").default(1), // 1 = available, 0 = sold
  price: integer("price"), // in cents
  createdAt: timestamp("created_at").defaultNow(),
});

export const contactMessages = pgTable("contact_messages", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  firstName: text("first_name").notNull(),
  lastName: text("last_name").notNull(),
  email: text("email").notNull(),
  subject: text("subject").notNull(),
  message: text("message").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

export const insertArtworkSchema = createInsertSchema(artworks).omit({
  id: true,
  createdAt: true,
});

export const insertContactMessageSchema = createInsertSchema(contactMessages).omit({
  id: true,
  createdAt: true,
});

export type InsertArtwork = z.infer<typeof insertArtworkSchema>;
export type Artwork = typeof artworks.$inferSelect;
export type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;
export type ContactMessage = typeof contactMessages.$inferSelect;

// Keep existing user schema
export const users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
});

export const insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true,
});

export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect

---------------------------------

import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { Badge } from "@/components/ui/badge";
import type { Artwork } from "@shared/schema";

interface ArtworkCardProps {
  artwork: Artwork;
  index: number;
  onClick: () => void;
}

export default function ArtworkCard({ artwork, index, onClick }: ArtworkCardProps) {
  const { t, i18n } = useTranslation();
  
  const getTitle = () => {
    switch (i18n.language) {
      case "en":
        return artwork.titleEn || artwork.title;
      case "fr":
        return artwork.titleFr || artwork.title;
      default:
        return artwork.title;
    }
  };

  const getDescription = () => {
    switch (i18n.language) {
      case "en":
        return artwork.descriptionEn || artwork.description;
      case "fr":
        return artwork.descriptionFr || artwork.description;
      default:
        return artwork.description;
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 30 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.8, delay: index * 0.1 }}
      className="watercolor-hover cursor-pointer"
      onClick={onClick}
      data-testid={`artwork-card-${artwork.id}`}
    >
      <div className="bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg border border-watercolor-blue/20 dark:border-gray-700">
        <img
          src={artwork.imageUrl}
          alt={getTitle()}
          className="w-full h-48 object-cover"
          loading="lazy"
        />
        <div className="p-4">
          <h3 className="font-poppins font-semibold text-lg text-gray-800 dark:text-white mb-2">
            {getTitle()}
          </h3>
          <p className="text-sm text-gray-600 dark:text-gray-300 mb-2">
            {artwork.year} • {t(`techniques.${artwork.technique}`)}
          </p>
          <div className="flex flex-wrap gap-1 mb-3">
            {artwork.tags?.slice(0, 3).map((tag) => (
              <Badge
                key={tag}
                variant="secondary"
                className="bg-watercolor-sage text-gray-700 dark:text-gray-300 text-xs"
              >
                {t(`themes.${tag}`) || tag}
              </Badge>
            ))}
          </div>
          <p className="text-sm text-gray-500 dark:text-gray-400 line-clamp-2">
            {getDescription().substring(0, 80)}...
          </p>
        </div>
      </div>
    </motion.div>
  );
}

------------------------------------

import { useState } from "react";
import { Link, useParams } from "wouter";
import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { Helmet } from "react-helmet-async";
import { ArrowLeft } from "lucide-react";

import { Badge } from "@/components/ui/badge";
import ImageSlider from "@/components/image-slider";
import ImageModal from "@/components/image-modal";
import NotFound from "@/pages/not-found";
import artworksData from "@/data/artworks.json";
// Zmień ten import
import { artworksSchema, type Artwork } from "@shared/schema";

export default function ArtworkDetail() {
  const { id } = useParams();
  const { t, i18n } = useTranslation();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalImageUrl, setModalImageUrl] = useState("");

  // Zmień tę linię
  const artworks = artworksSchema.parse(artworksData);
  const artwork = artworks.find((a) => a.id === id);

  if (!artwork) {
    return <NotFound />;
  }

  const getLocalized = (field: "title" | "description" | "story") => {
    const lang = i18n.language;
    let key: keyof Artwork;

    switch (lang) {
      case "en":
        key = `${field}En` as keyof Artwork;
        break;
      case "fr":
        key = `${field}Fr` as keyof Artwork;
        break;
      default:
        key = field;
        break;
    }
    return (artwork[key] || artwork[field]) as string;
  };

  const handleImageClick = (imageUrl: string) => {
    setModalImageUrl(imageUrl);
    setIsModalOpen(true);
  };

  const images =
    artwork.imageUrls && artwork.imageUrls.length > 0
      ? artwork.imageUrls
      : [artwork.imageUrl];

  return (
    <>
      <Helmet>
        <title>{getLocalized("title")} - Atlas Twórczości Rutkowskiego</title>
        <meta
          name="description"
          content={getLocalized("description").substring(0, 160)}
        />
        <meta property="og:title" content={getLocalized("title")} />
        <meta
          property="og:description"
          content={getLocalized("description").substring(0, 160)}
        />
        <meta property="og:image" content={artwork.imageUrl} />
      </Helmet>

      <section className="pt-20 py-20 px-4">
        <div className="max-w-6xl mx-auto">
          <Link
            href="/"
            className="inline-flex items-center text-gray-600 dark:text-gray-300 hover:text-watercolor-ochre-accent dark:hover:text-watercolor-ochre transition-colors mb-8"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            {t("artwork.backToGallery")}
          </Link>

          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            className="grid grid-cols-1 lg:grid-cols-2 gap-12"
          >
            <ImageSlider
              images={images}
              alt={getLocalized("title")}
              onImageClick={handleImageClick}
            />

            <div className="space-y-6">
              <div>
                <h1 className="font-poppins font-bold text-3xl text-gray-800 dark:text-white mb-2">
                  {getLocalized("title")}
                </h1>
                <p className="text-watercolor-ochre-accent dark:text-watercolor-ochre font-medium text-lg">
                  {artwork.year} • {t(`techniques.${artwork.technique}`)}
                </p>
              </div>

              <div className="bg-white/60 dark:bg-gray-800/60 backdrop-blur-lg rounded-xl p-4 border border-white/20 dark:border-gray-700/20">
                <h3 className="font-poppins font-semibold text-lg text-gray-800 dark:text-white mb-3">
                  {t("artwork.details")}
                </h3>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      {t("artwork.dimensions")}:
                    </span>
                    <p className="font-medium text-gray-800 dark:text-white">
                      {artwork.dimensions}
                    </p>
                  </div>
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      {t("artwork.technique")}:
                    </span>
                    <p className="font-medium text-gray-800 dark:text-white">
                      {t(`techniques.${artwork.technique}`)}
                    </p>
                  </div>
                  {artwork.substrate && (
                    <div>
                      <span className="text-gray-600 dark:text-gray-400">
                        {t("artwork.substrate")}:
                      </span>
                      <p className="font-medium text-gray-800 dark:text-white">
                        {t(
                          `artwork.substrates.${artwork.substrate}`,
                          artwork.substrate
                        )}
                      </p>
                    </div>
                  )}
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      {t("artwork.status")}:
                    </span>
                    <p
                      className={`font-medium ${
                        artwork.available
                          ? "text-watercolor-ochre-accent dark:text-watercolor-ochre"
                          : "text-watercolor-umber-accent dark:text-watercolor-umber"
                      }`}
                    >
                      {artwork.available
                        ? t("artwork.available")
                        : t("artwork.sold")}
                    </p>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="font-poppins font-semibold text-lg text-gray-800 dark:text-white mb-3">
                  {t("artwork.tags")}
                </h3>
                <div className="flex flex-wrap gap-2">
                  {artwork.tags?.map((tag: string) => (
                    <Badge
                      key={tag}
                      variant="secondary"
                      className="bg-watercolor-sage text-gray-700 px-3 py-1 rounded-full text-sm font-medium"
                    >
                      {t(`themes.${tag}`, tag) as string}
                    </Badge>
                  ))}
                </div>
              </div>

              <div>
                <h3 className="font-poppins font-semibold text-lg text-gray-800 dark:text-white mb-3">
                  {t("artwork.description")}
                </h3>
                <p className="text-gray-600 dark:text-gray-300 leading-relaxed">
                  {getLocalized("description")}
                </p>
              </div>

              {getLocalized("story") && (
                <div className="bg-gradient-to-r from-watercolor-ochre/30 to-watercolor-umber/30 dark:from-gray-700/30 dark:to-gray-600/30 rounded-xl p-4 border-l-4 border-watercolor-ochre-accent">
                  <h3 className="font-poppins font-semibold text-lg text-gray-800 dark:text-white mb-2">
                    <i className="fas fa-quote-left text-watercolor-ochre-accent mr-2"></i>
                    {t("artwork.story")}
                  </h3>
                  <p className="text-gray-700 dark:text-gray-300 italic">
                    "{getLocalized("story")}"
                  </p>
                </div>
              )}
            </div>
          </motion.div>
        </div>
      </section>

      <ImageModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        imageUrl={modalImageUrl}
        alt={getLocalized("title")}
      />
    </>
  );
}

-----------------------------

<!DOCTYPE html>
<html lang="pl">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1"
    />
    <title>
      Zbigniew Jan Rutkowski – Malarstwo, Akwarela | Oficjalna Galeria
    </title>
    <meta
      name="description"
      content="Odkryj blisko 50 lat twórczości radomskiego akwarelisty Zbigniewa Rutkowskiego. Przeglądaj interaktywną galerię prac, które znajdują się w prywatnych kolekcjach na całym świecie."
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&family=Inter:wght@300;400;500;600&family=Playfair+Display:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

